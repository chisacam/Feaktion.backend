generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comment {
  comment_id         Int           @id @default(autoincrement())
  feaktion_id        Int
  episode_id         Int
  user_id            Int
  comment_body       String        @db.VarChar(100)
  comment_uploaddate DateTime      @default(now()) @db.Timestamp(0)
  comment_updatedate DateTime      @default(now()) @db.Timestamp(0)
  feaktion           feaktion      @relation(fields: [feaktion_id], references: [feaktion_id], onDelete: Cascade)
  episode            episode       @relation(fields: [episode_id], references: [episode_id], onDelete: Cascade)
  feaktion_user      feaktion_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  reply              reply[]
}

model reply {
  reply_id         Int           @id @default(autoincrement())
  comment_id       Int
  user_id          Int
  reply_body       String        @db.VarChar(300)
  reply_uploaddate DateTime      @default(now()) @db.Timestamp(0)
  reply_updatedate DateTime      @default(now()) @db.Timestamp(0)
  comment          comment       @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade)
  feaktion_user    feaktion_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model feaktion_tag {
  id          Int      @id @default(autoincrement())
  feaktion_id Int
  tag         String   @db.VarChar(50)
  feaktion    feaktion @relation(fields: [feaktion_id], references: [feaktion_id], onDelete: Cascade)
}

model feaktion_genre {
  id          Int      @id @default(autoincrement())
  feaktion_id Int
  genre       String   @db.VarChar(50)
  feaktion    feaktion @relation(fields: [feaktion_id], references: [feaktion_id], onDelete: Cascade)
}

model episode {
  episode_id         Int               @id @default(autoincrement())
  feaktion_id        Int
  user_id            Int
  episode_title      String            @db.VarChar(50)
  scenes             Json
  episode_uploaddate DateTime          @default(now()) @db.Timestamp(0)
  episode_updatedate DateTime          @default(now()) @db.Timestamp(0)
  feaktion           feaktion          @relation(fields: [feaktion_id], references: [feaktion_id], onDelete: Cascade)
  feaktion_user      feaktion_user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  comment            comment[]
  episode_like       episode_like[]
  reading_history    reading_history[]
}

model episode_temp_saved {
  id            Int           @id @default(autoincrement())
  user_id       Int
  feaktion_id   Int
  title         String        @db.VarChar(50)
  scenes        Json
  saved_date    DateTime      @default(now()) @db.Timestamp(0)
  feaktion      feaktion      @relation(fields: [feaktion_id], references: [feaktion_id], onDelete: Cascade)
  feaktion_user feaktion_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model feaktion {
  feaktion_id          Int                  @id @default(autoincrement())
  user_id              Int
  feaktion_thumb       String               @db.VarChar(200)
  feaktion_title       String               @db.VarChar(50)
  feaktion_description String?              @db.VarChar(100)
  feaktion_type        String               @db.VarChar(10)
  feaktion_pub         String               @db.VarChar(10)
  feaktion_uploaddate  DateTime             @default(now()) @db.Timestamp(0)
  feaktion_updatedate  DateTime             @default(now()) @db.Timestamp(0)
  feaktion_user        feaktion_user        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  episode              episode[]
  feaktion_tag         feaktion_tag[]
  feaktion_genre       feaktion_genre[]
  episode_temp_saved   episode_temp_saved[]
  comment              comment[]
  episode_like         episode_like[]
  reading_history      reading_history[]
}

model episode_like {
  like_id         Int           @id @default(autoincrement())
  feaktion_id     Int
  episode_id      Int
  user_id         Int
  like_updatedate DateTime      @default(now()) @db.Timestamp(0)
  feaktion        feaktion      @relation(fields: [feaktion_id], references: [feaktion_id], onDelete: Cascade)
  episode         episode       @relation(fields: [episode_id], references: [episode_id], onDelete: Cascade)
  feaktion_user   feaktion_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model feaktion_user {
  user_id            Int                  @id @default(autoincrement())
  id                 String               @db.VarChar(50)
  email              String               @unique @db.VarChar(30)
  password           String               @db.VarChar(100)
  nickname           String               @db.VarChar(50)
  sex                String               @db.VarChar(10)
  regdate            DateTime             @default(now()) @db.Timestamp(0)
  comment            comment[]
  feaktion           feaktion[]
  episode_like       episode_like[]
  reading_history    reading_history[]
  viewer_setting     viewer_setting[]
  reply              reply[]
  user_interest      user_interest[]
  user_agreement     user_agreement[]
  user_profile       user_profile[]
  episode_temp_saved episode_temp_saved[]
  episode            episode[]
}

model user_interest {
  id            Int           @id @default(autoincrement())
  user_id       Int
  interest      String
  feaktion_user feaktion_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model user_agreement {
  id            Int           @id @default(autoincrement())
  user_id       Int
  agree_service Boolean
  agree_info    Boolean
  agree_date    DateTime      @default(now()) @db.Timestamp(0)
  feaktion_user feaktion_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model user_profile {
  id            Int           @id @default(autoincrement())
  user_id       Int
  profile       String?       @db.VarChar(50)
  intro         String?       @db.VarChar(100)
  feaktion_user feaktion_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model reading_history {
  reading_id    String        @id
  episode_id    Int
  feaktion_id   Int
  user_id       Int
  reading_date  DateTime      @default(now()) @db.Timestamp(0)
  feaktion_user feaktion_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  feaktion      feaktion      @relation(fields: [feaktion_id], references: [feaktion_id])
  episode       episode       @relation(fields: [episode_id], references: [episode_id])
}

model viewer_setting {
  viewer_setting_id Int           @id @default(autoincrement())
  user_id           Int
  fontsize          Int?
  font              String?       @db.VarChar(20)
  paragraph_width   Int?
  paragraph_space   Int?
  line_space        Int?
  background_color  String?       @db.VarChar(20)
  feaktion_user     feaktion_user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}
